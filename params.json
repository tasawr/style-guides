{"body":"### Setup.\r\ndownload and install git from http://gitscm.org once you installed it setup your github configurations as follows:\r\n* create a file at your home directory named \".gitconfig\" and put the following as content (your paths might be different):\r\n\r\n```\r\n[user]\r\n\tname = Nurul Ferdous\r\n\temail = nurul@tasawr.com\r\n[alias]\r\n\tst = status\r\n\tci = commit\r\n\tbr = branch\r\n\tco = checkout\r\n\tdf = diff\r\n\tlg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative \r\n\twho = shortlog -s --\r\n\tdc = diff --cached\r\n\tlg = log -p\r\n\tlol = log --graph --decorate --pretty=oneline --abbrev-commit\r\n\tlola = log --graph --decorate --pretty=oneline --abbrev-commit --all\r\n\tls = ls-files\r\n\turl = remote show origin\r\n\t# Show files ignored by git:\r\n\tign = ls-files -o -i --exclude-standard\r\n\tswitch = !legit switch \\\"$@\\\"\r\n\tbranches = !legit branches\r\n\tsprout = !legit sprout \\\"$@\\\"\r\n\tunpublish = !legit unpublish \\\"$@\\\"\r\n\tharvest = !legit harvest \\\"$@\\\"\r\n\tsync = !legit sync \\\"$@\\\"\r\n\tpublish = !legit publish \\\"$@\\\"\r\n\tgraft = !legit graft \\\"$@\\\"\r\n[core]\r\n\texcludesfile = ~/.gitignore\r\n[difftool \"sourcetree\"]\r\n\tcmd = opendiff \\\"$LOCAL\\\" \\\"$REMOTE\\\"\r\n\tpath = \r\n[mergetool \"sourcetree\"]\r\n\tcmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \\\"$LOCAL\\\" \\\"$REMOTE\\\" -ancestor \\\"$BASE\\\" -merge \\\"$MERGED\\\"\r\n\ttrustExitCode = true\r\n[github]\r\n\tuser = dynamicguy\r\n\ttoken = your_token\r\n[color]\r\n\tui = true\r\n```\r\n\r\nand here is is the ~/.gitignore file content:\r\n\r\n```\r\n# Compiled source #\r\n###################\r\n*.com\r\n*.class\r\n*.dll\r\n*.exe\r\n*.o\r\n*.so\r\n\r\n# Packages #\r\n############\r\n# it's better to unpack these files and commit the raw source\r\n# git has its own built in compression methods\r\n*.7z\r\n*.dmg\r\n*.gz\r\n*.iso\r\n#*.jar\r\n*.rar\r\n*.tar\r\n*.zip\r\n\r\n# Logs and databases #\r\n######################\r\n*.log\r\n*.sql\r\n*.sqlite\r\n\r\n# OS generated files #\r\n######################\r\n.DS_Store*\r\nehthumbs.db\r\nIcon?\r\nThumbs.db\r\n\r\n# Ruby specific #\r\n#################\r\n*.gem\r\n*.rbc\r\n.bundle\r\n.config\r\ncoverage\r\nInstalledFiles\r\nlib/bundler/man\r\npkg\r\nrdoc\r\nspec/reports\r\ntest/tmp\r\ntest/version_tmp\r\ntmp\r\n\r\n# YARD artifacts\r\n.yardoc\r\n_yardoc\r\ndoc/\r\n\r\n# Rails specific\r\n*.rbc\r\n*.sassc\r\n.sass-cache\r\ncapybara-*.html\r\n.rspec\r\n/.bundle\r\n/vendor/bundle\r\n/log/*\r\n/tmp/*\r\n/db/*.sqlite3\r\n/public/system/*\r\n/coverage/\r\n/spec/tmp/*\r\n**.orig\r\nconfig/*.yml\r\nrerun.txt\r\npickle-email-*.html\r\n\r\n\r\n# ZF specific #\r\n###############\r\nnbproject\r\nINSTALL.txt\r\nLICENSE.txt\r\nREADME.txt\r\ndemos/\r\nextras/documentation\r\n\r\n# Django specific #\r\n###################\r\n*.log\r\n*.pot\r\n*.pyc\r\nlocal_settings.py\r\n```\r\n\r\n### Time to clone.\r\nYou can clone a repository with git clone [url]. For example, if you want to clone a repository named as \"style-guides\" from git, you can do so like this:\r\n\r\n```\r\n$ git clone git@github.com:tasawr/style-guides.git\r\n```\r\n\r\nIf you’re familiar with other VCS systems such as Subversion, you’ll notice that the command is clone and not checkout. Do not use http url to clone; it will save time as in http you will have to type passwords in almost every actions.\r\n\r\n\r\n### Git Workflow.\r\nWhen you are using git for version control, you can commit every time you save a file, even for the tiniest typo fixes. If only you will ever see your git commits, no one will care. But if you are working on a team, either commercially or as part of an open source project, you will drive your fellow programmers crazy if they try to follow your work and see such “granular” commits. Instead, get in the habit of creating a git branch each time you begin work to implement a feature. When your new feature is complete, merge the branch and “squash” the commits so your comrades see just one commit for the entire feature.\r\n\r\nCreate a new git branch for your feature:\r\n\r\n```\r\n$ git checkout -b request-invitation\r\n```\r\n\r\nIf you haven’t commited any changes yet, commit your changes to git:\r\n\r\n```\r\n$ git add .\r\n$ git commit -am \"implement 'Request Invitation' feature\"\r\n```\r\n\r\nSince the new feature is complete, merge the working branch to “master” and squash the commits so you have just one commit for the entire feature:\r\n\r\n```\r\n$ git checkout dev\r\n$ git merge --squash request-invitation\r\n$ git commit -am \"implement 'Request Invitation' feature\"\r\n```\r\n\r\nYou can delete the working branch when you’re done:\r\n\r\n```\r\n$ git branch -D request-invitation\r\n```\r\n\r\n### Support or Contact\r\nHaving trouble with this? contact @dynamicguy or shoot an email at sre@tasawr.com and we’ll help you sort it out.","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"style guides for using git in Tasawr Interactive","google":"","name":"Tasawr Interactive"}